{"meta":{"title":"guowj","subtitle":"The fear of Jehovah is the beginning of wisdom, And the knowledge of the Holy One is understanding.","description":"个人技术博客","author":"guowj","url":"https://gwjacqueline.github.io","root":"/"},"pages":[{"title":"标签","date":"2019-04-04T12:52:08.000Z","updated":"2019-04-04T12:52:08.000Z","comments":true,"path":"tags/index.html","permalink":"https://gwjacqueline.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-04-04T12:54:25.000Z","updated":"2019-04-04T12:54:25.000Z","comments":true,"path":"categories/index.html","permalink":"https://gwjacqueline.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"移动端常见兼容性问题","slug":"移动端常见兼容性问题","date":"2019-04-05T12:14:15.000Z","updated":"2019-04-05T12:14:15.000Z","comments":true,"path":"移动端常见兼容性问题/","link":"","permalink":"https://gwjacqueline.github.io/移动端常见兼容性问题/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文主要想记录下最近工作中遇到的一些移动端兼容问题，便于日后能够快速解决一些Bug。 ios fixed定位+长表单 主要代码：12345678&lt;body&gt; &lt;header&gt; &lt;!-- fixed定位的头部 --&gt; &lt;header&gt; &lt;section&gt; &lt;!-- 自然布局 --&gt; &lt;/section&gt;&lt;/body&gt; bug描述：只有在ios上出现：当section过长(有滚动条时)，表单获取焦点时。上图红色框的头部会掉落至绿色部分。 bug解决：造成问题的原因：当表单获取焦点，键盘弹出时，可视高度变小。解决方式：表单获取焦点时，把fixed定位改成absolute;失去焦点时，改回来。个人建议：在实际开发中，避免让头部使用fixed定位。页面整体建议采用flex布局，减少页面高度计算。 Android footer 绝对定位 主要代码：1234567891011&lt;body&gt; &lt;header&gt; &lt;!-- absolute定位的头部 --&gt; &lt;header&gt; &lt;section&gt; &lt;!-- 自然布局 --&gt; &lt;/section&gt; &lt;section&gt; &lt;!-- fixed定位的footer --&gt; &lt;/section&gt;&lt;/body&gt; bug描述：只有在Android手机上出现：表单获取焦点时,系统键盘会将fixed定位的footer顶起来。 bug解决：造成问题的原因：系统键盘会顶走fixed布局元素。解决方式：1.表单获取焦点时，把fixed定位的元素改成static；失焦后，再改回来。2.表单获取焦点时，把fixed定位的元素设置为display:none；失焦后，再设置成为display:block。 ios 微信浏览器 长表单留白 bug描述：只有在ios微信浏览器上出现。当输入框聚焦，系统键盘把页面顶起后，键盘收起。会发现页面底部留白 bug解决：造成问题的原因：系统键盘弹出触发resize导致页面高度缩小。解决方式：12345$(&quot;input,textarea&quot;).blur(function () &#123; setTimeout(function () &#123; //若不加定时器，部分手机会失效 $(&quot;body&quot;).scrollTop($(body).scrollTop()+1); //让页面偷偷滚动一下，消除空白 &#125;,100);&#125;); transform弹窗不居中 主要代码：123456789101112/*弹窗*/.dialog-content &#123; position: absolute; top: 50%; left: 50%; z-index: 10003; width: 73%; padding-top: .66667rem; transform: translate(-50%,-50%); background-color: rgba(255,255,255,.95); border-radius: .21333rem;&#125; bug描述：在ios 8及以下的系统，弹窗不居中 bug解决：造成问题的原因：Safari支持代替的-webkit-transform属性，读取不到transform属性解决方式：加上-webkie-transform属性，注意兼容性写法顺序1234567891011121314/*弹窗*/.dialog-content &#123; position: absolute; top: 50%; left: 50%; z-index: 10003; width: 73%; padding-top: .66667rem; background-color: rgba(255,255,255,.95); border-radius: .21333rem; -webkit-transform: translate(-50%,-50%); //一定要加上兼容性的写法 -ms-transform: translate(-50%,-50%); //IE9以下不兼容，IE9支持代替的-ms-transform属性不过只支持2D transform: translate(-50%,-50%);&#125; ios 输入框背景色变黄 主要代码：1234567input&#123; border: none; background: 0 0; display: block; -webkit-tap-highlight-color: transparent; //只用于iOS。点击链接或者通过Javascript定义的可点击元素的时候，会出现一个半透明的灰色背景 -webkit-appearance: none; //消除输入框和按钮的原生外观，在iOS上加上这个属性才能给按钮和输入框自定义样式&#125; bug描述：自动填充表单时，输入框背景色变黄。 bug解决：造成问题的原因：如果不设置，autocomplete默认是on的解决方式：1.利用H5新增属性 autocomplete=”off”，直接关闭自动填充1&lt;input type=&quot;text&quot; autocomplete=&quot;off&quot;&gt; 2.给form表单增加autocomplete=”off”，一次性取消表单内所有输入框的自动填充功能123&lt;form autocomplete=&quot;off&quot;&gt; &lt;input type=&quot;text&quot; &gt;&lt;/form&gt; 3.利用css12345//给input设置内置阴影！阴影大小一定要比你的input本身大input:-webkit-autofill &#123; -webkit-box-shadow: 0 0 0px 1000px white inset !important;//输入框背景颜色 -webkit-text-fill-color: #000!important;//输入框文字颜色&#125; ios 弹出框被遮罩层盖住 主要代码：123456789101112131415161718192021222324252627282930313233&lt;body&gt; &lt;header&gt; &lt;!-- 头部代码 --&gt; &lt;/header&gt; &lt;section class=&quot;content&quot;&gt; &lt;!-- 打开弹窗按钮 --&gt; &lt;section class=&quot;btn-wrap&quot;&gt; &lt;input value=&quot;打开&quot;&gt; &lt;/section&gt; &lt;!-- 弹出框 fixed定位--&gt; &lt;div class=&quot;keyboard&quot;&gt;&lt;/div&gt; &lt;/section&gt; &lt;!-- 遮罩层 fixed定位--&gt; &lt;div class=&quot;mask-black&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;style&gt;.mask-black &#123; background-color: rgba(51,51,51,.75); position: fixed; z-index: 500; bottom: 0; right: 0; left: 0; top: 0;&#125;.keyboard &#123; position: fixed; bottom: 0; left: 0; width: 100%; z-index: 1000;&#125;&lt;/style&gt; bug描述：在PC端及安卓上显示正常，唯独在ios上弹窗被遮档 bug解决：造成问题的原因：虽然z-index的层级问题没错，但是代码结构不规范。个人感觉很多时候一些奇怪的bug来源于我们代码的不规范。解决方式：将弹出框移至外层123456789101112131415&lt;body&gt; &lt;header&gt; &lt;!-- 头部代码 --&gt; &lt;/header&gt; &lt;section class=&quot;content&quot;&gt; &lt;!-- 打开弹窗按钮 --&gt; &lt;section class=&quot;btn-wrap&quot;&gt; &lt;input value=&quot;打开&quot;&gt; &lt;/section&gt; &lt;/section&gt; &lt;!-- 弹出框 fixed定位--&gt; &lt;div class=&quot;keyboard&quot;&gt;&lt;/div&gt; //将弹出框移至外层 &lt;!-- 遮罩层 fixed定位--&gt; &lt;div class=&quot;mask-black&quot;&gt;&lt;/div&gt;&lt;/body&gt; ios 时间格式 主要代码：1var date = new Date(&quot;2019-07-21&quot;); bug描述：在ios上时间选择弹窗不能正常打开，报错显示NaN bug解决：造成问题的原因：ios对date()的支持不一样，ios只支持”/“的方式解决方式：修改时间格式1var date = new Date(&quot;2019/07/21&quot;); 个人建议：时间格式还是尽量用”/“的方式。 这个bug是我们组一个很腻害的小姐姐在编写时间插件的时候发现的，随即我就种草了哈哈哈 大家有兴趣可以看看她写的时间插件 ios fixed按钮上下飘动 主要代码：1234567891011121314&lt;body&gt; &lt;header&gt; &lt;!-- 头部代码 绝对定位--&gt; &lt;/header&gt; &lt;!-- 内容代码 绝对定位--&gt; &lt;section class=&quot;content&quot;&gt; &lt;!-- 列表 --&gt; &lt;ul&gt;&lt;/ul&gt; &lt;!-- fixed置底定位按钮 --&gt; &lt;section class=&quot;btn-wrap&quot;&gt; &lt;input value=&quot;打开&quot;&gt; &lt;/section&gt; &lt;/section&gt;&lt;/body&gt; bug描述：只出现在ios上，当列表ul过长时，快速滚动页面，fixed置底按钮会上下飘动 bug解决：解决方式：将fixed置底定位的按钮移到最外层1234567891011121314&lt;body&gt; &lt;header&gt; &lt;!-- 头部代码 绝对定位--&gt; &lt;/header&gt; &lt;!-- 内容代码 绝对定位--&gt; &lt;section class=&quot;content&quot;&gt; &lt;!-- 列表 --&gt; &lt;ul&gt;&lt;/ul&gt; &lt;/section&gt; &lt;!-- fixed置底定位按钮 移到最外层--&gt; &lt;section class=&quot;btn-wrap&quot;&gt; &lt;input value=&quot;打开&quot;&gt; &lt;/section&gt;&lt;/body&gt; h5虚拟键盘，密码框假光标移动问题 描述：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用h5虚拟键盘时，需要让输入框disabled,以至于没有系统光标。需要编写一个假光标，提升用户体验。因为输入框采用”type=”password”,所以会采用系统自带的密码遮掩点。每个系统密码遮掩点都不大一样。经过多台真机的多次调试，发现大致可分为四类：大部分安卓、vivo X9S、Vivo X20、ios。为了便于以后遇到类似问题，又需要大量时间进行调试，现在先记录下调试结果。 光标移动距离的计算： 光标移动距离=(密码个数*dotWidth)em;Ios: dotWidth=1vivo X9S: dotWidth=0.5Vivo X20: dotWidth=0.49其余机型：dotWidth=0.34获取机型的方法：123if(navigator.userAgent.indexOf(“vivo X9s”)!==-1)&#123; alert(&quot;是vivo X9s&quot;);&#125; 弹性盒子兼容问题描述：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前做过基于Android的智能电视项目，最早的需求是说最低兼容到Android5.0以上，于是就疯狂舒畅自由的使用新版盒子模型的写法。可是需求总是多变的，在开发接近尾声的时候，改成了兼容到Android3还是4。于是在低版本电视上盒子布局的前端页面变得面目全非。导致后来在使用盒子模型的时候总是小心翼翼，毕竟低版本的电视和手机还是有人用的。现在就记录下常见盒子模型的兼容写法把，能够让我们在面对测试提出页面bug的时候，快速定位问题所在并且解决它~ 兼容写法：12345678910111213141516171819202122232425262728293031323334353637383940414243444546//flex布局.flex&#123; display: -webkit-box; /* 老版本语法 */ display: -moz-box; /* 老版本语法: Firefox/ display: -webkit-flex; /* 新版本语法*/ display: flex;&#125;//两端对齐.flex-between&#123; -webkit-box-pack: justify; -moz-justify-content: space-between; -webkit-justify-content: space-between; justify-content: space-between;&#125;//左右、上下居中.flex-center&#123; -webkit-box-pack: center; /* 左右 */ -moz-justify-content: center; -webkit-justify-content: center; justify-content: center; -webkit-box-align: center; /* 上下 */ -moz-align-items: center; -webkit-align-items: center; align-items: center;&#125;//垂直对齐.flex-column&#123; -webkit-box-direction: normal; -webkit-box-orient: vertical; -moz-flex-direction: column; -webkit-flex-direction: column; flex-direction: column;&#125;//盒子相应比例(scss写法)@mixin flex-block($con:1)&#123; -webkit-box-flex: 1; -moz-box-flex: 1; -ms-flex: $con; -webkit-flex: $con; flex: $con;&#125;//引用方法：@include flex-block($con),能够快速实现想要的比例","categories":[{"name":"css","slug":"css","permalink":"https://gwjacqueline.github.io/categories/css/"}],"tags":[{"name":"移动端","slug":"移动端","permalink":"https://gwjacqueline.github.io/tags/移动端/"},{"name":"兼容性","slug":"兼容性","permalink":"https://gwjacqueline.github.io/tags/兼容性/"}]}]}